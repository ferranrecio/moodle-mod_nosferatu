{"version":3,"sources":["../src/nosferatu.js"],"names":["getServerState","activityid","ajax","call","methodname","args","stateData","loadState","reactive","log","error","setInitialState","Nosferatu","Reactive","nosferatu","name","eventName","eventTypes","modNosferatuStateUpdated","eventDispatch","notifyModNosferatuStateUpdated","mutations","init","cmid","config"],"mappings":"oQAkBA,OACA,OACA,O,gxDAQMA,CAAAA,CAAc,4CAAG,WAAMC,CAAN,wGACKC,WAAKC,IAAL,CAAU,CAAC,CAC/BC,UAAU,CAAE,yBADmB,CAE/BC,IAAI,CAAE,CACFJ,UAAU,CAAVA,CADE,CAFyB,CAAD,CAAV,EAKpB,CALoB,CADL,QACbK,CADa,iCAQZA,CARY,0CAAH,uD,CAmBdC,CAAS,4CAAG,WAAMN,CAAN,CAAkBO,CAAlB,iHAKQR,CAAAA,CAAc,CAACC,CAAD,CALtB,QAKVK,CALU,2DAOVG,UAAIC,KAAJ,CAAU,mCAAV,EACAD,UAAIC,KAAJ,OARU,kCAYdF,CAAQ,CAACG,eAAT,CAAyBL,CAAzB,EAZc,sDAAH,uD,CAwBTM,C,+FAAkBC,U,EAIXC,CAAS,CAAG,GAAIF,CAAAA,CAAJ,CAAc,CACnCG,IAAI,CAAE,eAD6B,CAEnCC,SAAS,CAAEC,aAAWC,wBAFa,CAGnCC,aAAa,CAAEC,gCAHoB,CAInCC,SAAS,CAAEA,WAJwB,CAAd,C,sBAQL,QAAPC,CAAAA,IAAO,CAACC,CAAD,CAAU,CAC1BhB,CAAS,CAACgB,CAAD,CAAOT,CAAP,CACZ,C,CAGDU,UAAOV,SAAP,CAAmBA,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {Reactive} from 'core/reactive';\nimport {mutations} from 'mod_nosferatu/mutations';\nimport {eventTypes, notifyModNosferatuStateUpdated} from 'mod_nosferatu/events';\nimport log from 'core/log';\nimport ajax from 'core/ajax';\nimport config from 'core/config';\n\n/**\n * Load the current course state from the server.\n *\n * @param {int} activityid the activity id\n * @returns {Object} the current course state\n */\nconst getServerState = async(activityid) => {\n    const stateData = await ajax.call([{\n        methodname: 'mod_nosferatu_get_state',\n        args: {\n            activityid\n        }\n    }])[0];\n\n    return stateData;\n};\n\n/**\n * Set up the course editor when the page is ready.\n *\n * The course can only be loaded once per instance. Otherwise an error is thrown.\n *\n * @param {int} activityid the activity id\n * @param {Reactive} reactive the reactive instance\n */\nconst loadState = async(activityid, reactive) => {\n\n    let stateData;\n\n    try {\n        stateData = await getServerState(activityid);\n    } catch (error) {\n        log.error(\"EXCEPTION RAISED WHILE INIT STATE\");\n        log.error(error);\n        return;\n    }\n\n    reactive.setInitialState(stateData);\n};\n\n/**\n * Main modfule module reactive class.\n *\n *\n * @module     core_courseformat/mod/nosferatu/nosferatu\n * @class     core_courseformat/mod/nosferatu/nosferatu\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass Nosferatu extends Reactive {\n\n}\n\nexport const nosferatu = new Nosferatu({\n    name: 'mod_nosferatu',\n    eventName: eventTypes.modNosferatuStateUpdated,\n    eventDispatch: notifyModNosferatuStateUpdated,\n    mutations: mutations,\n});\n\n// Load initial state.\nexport const init = (cmid) => {\n    loadState(cmid, nosferatu);\n};\n\n// While we don't have dev tools, save reactive globally.\nconfig.nosferatu = nosferatu;\n\n\n"],"file":"nosferatu.min.js"}