define("mod_nosferatu/local/simplified/mutations",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.mutations=void 0;const mutations=new
/**
   * Default mutation manager
   *
   * @module     mod_nosferatu/local/simplified/mutations
   * @class     mod_nosferatu/local/simplified/mutations
   * @copyright  2021 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class{bite(stateManager,personId){const state=stateManager.state;stateManager.setReadOnly(!1),state.people.get(personId).bitten=!0,stateManager.setReadOnly(!0)}cureAll(stateManager){const result=this._callCureAll(stateManager.state);stateManager.processUpdates(result)}_callCureAll(state){const result=[];return state.people.forEach((person=>{result.push({name:"people",action:"update",fields:{...person,bitten:!1}})})),result}putPerson(stateManager,person){void 0===person&&(person={});const firstFreeId=Array.from(stateManager.state.people.keys()).reduce(((max,id)=>Math.max(max,id)),0)+1,state=stateManager.state;stateManager.setReadOnly(!1),state.people.add({id:firstFreeId,name:"New person",bitten:!1,...person}),stateManager.setReadOnly(!0)}removePerson(stateManager,personId){const state=stateManager.state;stateManager.setReadOnly(!1),state.people.delete(personId),stateManager.setReadOnly(!0)}};_exports.mutations=mutations}));

//# sourceMappingURL=mutations.min.js.map