{"version":3,"file":"city.min.js","sources":["../../../src/local/beginner/city.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The city component.\n *\n * @module     mod_nosferatu/local/beginner/city\n * @class      mod_nosferatu/local/beginner/city\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\n\nexport default class extends BaseComponent {\n\n    /**\n     * It is important to follow some conventions while you write components. This way all components\n     * will be implemented in a similar way and anybody will be able to understand how it works.\n     *\n     * All the component definition should be initialized on the \"create\" method.\n     */\n    create() {\n        // This is an optional name for the debugging messages.\n        this.name = 'city';\n        // We will always define our component HTML selectors and classes this way so we only define\n        // once and we don't contaminate our logic with tags and other stuff.\n        this.selectors = {\n            PERSON: `[data-for='person']`,\n            PERSONNAME: `[data-for='personname']`,\n        };\n        this.classes = {\n            BITTEN: `bitten`,\n        };\n        // If you need local attributes like ids os something it should be initialized here.\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * Child components will inherit the reactive instance from the parent so no\n     * need to specify trhe reactive in the code.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Note in this case we want our stateReady to be async.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        // At this point we have the initial state. This means we can update the component\n        // in case some of the citizens is already bitten.\n        state.people.forEach((person) => {\n            this._refreshPerson({element: person});\n        });\n    }\n\n    /**\n     * We want to update the person every time something in its state change. To do this we need\n     * to define a watcher.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `people:updated`, handler: this._refreshPerson},\n        ];\n    }\n\n    /**\n     * We will trigger that method any time a person data changes.\n     *\n     * This method is used by stateReady\n     * but, most important, to watch the state. Any watcher receive an object with:\n     * - element: the afected element (a person in this case)\n     * - state: the full state object\n     *\n     * @param {Object} param the watcher param.\n     * @param {Object} param.element the person structure.\n     */\n    _refreshPerson({element}) {\n        // We have a convenience method to locate elements inside the component.\n        const target = this.getElement(this.selectors.PERSON, element.id);\n        if (!target) {\n            return;\n        }\n        // Add or remove the bitten class.\n        target.classList.toggle(this.classes.BITTEN, element.bitten ?? false);\n        // Update the citizen name\n        const name = target.querySelector(this.selectors.PERSONNAME);\n        name.innerHTML = element.name;\n    }\n}\n"],"names":["BaseComponent","create","name","selectors","PERSON","PERSONNAME","classes","BITTEN","target","this","element","document","querySelector","stateReady","state","people","forEach","person","_refreshPerson","getWatchers","watch","handler","getElement","id","classList","toggle","bitten","innerHTML"],"mappings":";;;;;;;;;uBA0B6BA,wBAQzBC,cAESC,KAAO,YAGPC,UAAY,CACbC,6BACAC,2CAECC,QAAU,CACXC,6BAeIC,OAAQL,kBACT,IAAIM,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCL,UAAAA,YAWRU,WAAWC,OAGPA,MAAMC,OAAOC,SAASC,cACbC,eAAe,CAACR,QAASO,YAUtCE,oBACW,CACH,CAACC,uBAAyBC,QAASZ,KAAKS,iBAehDA,6CAAeR,QAACA,oBAENF,OAASC,KAAKa,WAAWb,KAAKN,UAAUC,OAAQM,QAAQa,QACzDf,cAILA,OAAOgB,UAAUC,OAAOhB,KAAKH,QAAQC,+BAAQG,QAAQgB,oDAExClB,OAAOI,cAAcH,KAAKN,UAAUE,YAC5CsB,UAAYjB,QAAQR"}