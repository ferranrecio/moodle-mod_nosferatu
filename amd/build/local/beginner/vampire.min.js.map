{"version":3,"file":"vampire.min.js","sources":["../../../src/local/beginner/vampire.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The vampire component.\n *\n * @module     mod_nosferatu/local/beginner/vampire\n * @class      mod_nosferatu/local/beginner/vampire\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {nosferatu} from 'mod_nosferatu/local/beginner/nosferatu';\n\nexport default class extends BaseComponent {\n\n    /**\n     * All the component definition should be initialized on the \"create\" method.\n     */\n    create() {\n        // This is an optional name for the debugging messages.\n        this.name = 'vampire';\n        // Remeber, we must always define our component selectors and stuff in the create method.\n        this.selectors = {\n            PERSON: `select`,\n            SUBMIT: `button`,\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            selectors,\n            reactive: nosferatu,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Remember, this is our equivalent of document ready for components.\n     */\n    stateReady() {\n        // Add the event listeners.\n        this.addEventListener(\n            this.getElement(this.selectors.SUBMIT),\n            'click',\n            this._bitePersonListener\n        );\n        // As you may notice, we use \"this.addEventListener\" instead of\n        // \"this.getElement(this.selectors.SUBMIT).addEventListener\" and there are a very good\n        // reasons to do it that way:\n        //\n        // 1. A component is something that could be unregisterd at any moment (we will see later),\n        //    when a component is unregisterd, all listeners added using this.addEventListener will\n        //    be also removed automatically.\n        //\n        // 2. If at some point you need to stop listening an event, you can use this.removeEventListener\n        //    without worring about binding problems (quite common when you use object oriented code\n        //    with JS events).\n        //\n        // 3. The \"this\" inside your listeners will always the component instance, not a DOM element.\n        //    this way you can reuse the same methods for other uses, not only as listeners. And more\n        //    important, in all your component methods the \"this\" value will be consistent.\n    }\n\n    /**\n     * Our submit handler.\n     *\n     * @param {Event} event the click event\n     */\n    _bitePersonListener(event) {\n        // We don't want to submit the form.\n        event.preventDefault();\n        // Get the selected person id.\n        const select = this.getElement(this.selectors.PERSON);\n        const personId = select.value;\n        this.reactive.dispatch('bite', personId);\n    }\n}\n"],"names":["BaseComponent","create","name","selectors","PERSON","SUBMIT","target","this","element","document","querySelector","reactive","nosferatu","stateReady","addEventListener","getElement","_bitePersonListener","event","preventDefault","personId","value","dispatch"],"mappings":";;;;;;;;;uBA2B6BA,wBAKzBC,cAESC,KAAO,eAEPC,UAAY,CACbC,gBACAC,6BAWIC,OAAQH,kBACT,IAAII,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCH,UAAAA,UACAQ,SAAUC,uBASlBC,kBAESC,iBACDP,KAAKQ,WAAWR,KAAKJ,UAAUE,QAC/B,QACAE,KAAKS,qBAwBbA,oBAAoBC,OAEhBA,MAAMC,uBAGAC,SADSZ,KAAKQ,WAAWR,KAAKJ,UAAUC,QACtBgB,WACnBT,SAASU,SAAS,OAAQF"}