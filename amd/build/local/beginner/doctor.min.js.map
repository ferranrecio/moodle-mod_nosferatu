{"version":3,"file":"doctor.min.js","sources":["../../../src/local/beginner/doctor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The doctor component.\n *\n * @module     mod_nosferatu/local/beginner/doctor\n * @class      mod_nosferatu/local/beginner/doctor\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {nosferatu} from 'mod_nosferatu/local/beginner/nosferatu';\n\nexport default class extends BaseComponent {\n\n    /**\n     * One last timte: all the component definition should be initialized on the \"create\" method.\n     */\n    create() {\n        this.name = 'doctor';\n\n        this.selectors = {\n            SUBMIT: `button`,\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            selectors,\n            reactive: nosferatu,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Remember: this is our equivalent of document ready for components.\n     */\n    stateReady() {\n        // Remember: bind events using this.addEventListener.\n        this.addEventListener(\n            this.getElement(),\n            'click',\n            this._cureAllCitizens\n        );\n        // Note: this.getElement(string query, [int id]) will find specific DOM elements inside the\n        //       component main element. However, calling this.getElement() without params is an alias\n        //       for this.element.\n    }\n\n    /**\n     * Our submit handler.\n     *\n     * Repeat after me: only mutations can alter the state.\n     *\n     * @param {Event} event the click event\n     */\n    _cureAllCitizens(event) {\n        event.preventDefault();\n        this.reactive.dispatch('cureAll');\n    }\n}\n"],"names":["BaseComponent","create","name","selectors","SUBMIT","target","this","element","document","querySelector","reactive","nosferatu","stateReady","addEventListener","getElement","_cureAllCitizens","event","preventDefault","dispatch"],"mappings":";;;;;;;;;uBA2B6BA,wBAKzBC,cACSC,KAAO,cAEPC,UAAY,CACbC,6BAWIC,OAAQF,kBACT,IAAIG,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCF,UAAAA,UACAO,SAAUC,uBASlBC,kBAESC,iBACDP,KAAKQ,aACL,QACAR,KAAKS,kBAcbA,iBAAiBC,OACbA,MAAMC,sBACDP,SAASQ,SAAS"}