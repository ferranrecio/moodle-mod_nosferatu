define("mod_nosferatu/local/starter_example",["exports","core/reactive","mod_nosferatu/events"],(function(_exports,_reactive,_events){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;
/**
   * Test component example.
   *
   * This file will be your first reactive example. All the code is structures to support the learning
   * path, not to be optimal or canonical. The exercice is divided into incremental steps and each step
   * adds new code. When one step is implemented, you don't need to modify that code anymore, you will
   * only need to add more code below.
   *
   * In a real scenario, most of the code will be located in
   * different modules in a more logical way. However, as a first example it guide you through most of
   * the reactive high concepts.
   *
   * Later in the course you will reimplement the same example but with the correct module structure
   * so don't worry too much about not following the Moodle conventions right now.
   *
   * @module     mod_nosferatu/local/starter_example
   * @copyright  2020 Ferran Recio <ferran@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const onInit=[];_exports.init=function(target){const element=document.getElementById(target);onInit.forEach((method=>method(element)))};const city=new _reactive.Reactive({name:"mod_nosferatu_city",eventName:_events.eventTypes.modNosferatuStateUpdated,eventDispatch:_events.notifyModNosferatuStateUpdated,state:{people:[{id:1,name:"Carlos",bitten:!1},{id:2,name:"Amaia",bitten:!1},{id:3,name:"Sara",bitten:!1},{id:4,name:"Ilya",bitten:!0},{id:5,name:"Ferran",bitten:!1}]}});class CitizenList extends _reactive.BaseComponent{create(){this.name="CitizenList",this.selectors={PERSON:"[data-for='person']",PERSONNAME:"[data-for='personname']"},this.classes={BITTEN:"bitten"}}stateReady(state){state.people.forEach((person=>{this._refreshPerson({element:person})}))}getWatchers(){return[{watch:"people:updated",handler:this._refreshPerson}]}_refreshPerson(_ref){var _element$bitten;let{element:element}=_ref;const target=this.getElement(this.selectors.PERSON,element.id);target.classList.toggle(this.classes.BITTEN,null!==(_element$bitten=element.bitten)&&void 0!==_element$bitten&&_element$bitten);target.querySelector(this.selectors.PERSONNAME).innerHTML=element.name}}onInit.push((element=>{new CitizenList({element:element,reactive:city})}));class Mutations{bite(stateManager,personId){const state=stateManager.state;stateManager.setReadOnly(!1),state.people.get(personId).bitten=!0,stateManager.setReadOnly(!0)}}city.setMutations(new Mutations);class Vampire extends _reactive.BaseComponent{create(){this.name="vampire",this.selectors={PERSON:"select",SUBMIT:"button"}}stateReady(){this.addEventListener(this.getElement(this.selectors.SUBMIT),"click",this._bitePersonListener)}_bitePersonListener(event){event.preventDefault();const personId=this.getElement(this.selectors.PERSON).value;this.reactive.dispatch("bite",personId)}}onInit.push((element=>{new Vampire({element:element.querySelector("[data-for='vampire']")})}));city.setMutations(new class extends Mutations{cureAll(stateManager){const result=this.callCureAll(stateManager.state);stateManager.processUpdates(result)}callCureAll(state){const result=[];return state.people.forEach((person=>{result.push({name:"people",action:"update",fields:{...person,bitten:!1}})})),result}});class Doctor extends _reactive.BaseComponent{create(){this.name="doctor",this.selectors={SUBMIT:"button"}}stateReady(){this.addEventListener(this.getElement(),"click",this._cureAllCitizens)}_cureAllCitizens(event){event.preventDefault(),this.reactive.dispatch("cureAll")}}onInit.push((element=>{new Doctor({element:element.querySelector("[data-for='doctor']")})}))}));

//# sourceMappingURL=starter_example.min.js.map