{"version":3,"file":"app.min.js","sources":["../../../../src/local/templatecomponents/intro02/app.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module app\n *\n * @module     mod_nosferatu/local/templatecomponents/intro02/app\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {Reactive} from 'core/reactive';\nimport {eventTypes, notifyModNosferatuStateUpdated} from 'mod_nosferatu/events';\n\n// All your reactive components will share the same reactive APP instance.\n// This file is a simple example of how a reactive APP module can be created.\n\n// This is out initial state. All components will watch those data and react to any change.\n// For more complex aplications this state will be loaded using a webservice but, for now,\n// we will use some lists.\nconst state = {\n    todo: [\n        {\n            id: 1,\n            name: 'Create a new Template Component',\n        },\n        {\n            id: 2,\n            name: 'Understand state mutations',\n        },\n    ],\n    done: [\n        {\n            id: 3,\n            name: 'Learn the basics of the Reactive API',\n        },\n    ],\n    // You can add more arrays or objects in the first level, but not simple values.\n};\n\n// It is recommended to use your own reactive class extending the base one.\n// By having your own class you will be able to add global methods to you application\n// because all components will inherit the main reactive instance.\nclass TodoList extends Reactive {\n    /**\n     * Check if has some task.\n     *\n     * @returns {boolean}\n     */\n    hasTasks() {\n        return this.state.todo.size > 0 || this.state.done.size > 0;\n    }\n}\n\n// In next examples we will see that having having mutation methods in its own\n// class is a good practice. However, for this simple example we will keep them here.\n\nclass Mutations {\n    /**\n     * Add a new task to the todo list.\n     *\n     * @param {StateManager} stateManager State manager.\n     * @param {string} taskName Task name.\n     */\n    addTask(stateManager, taskName) {\n        const state = stateManager.state;\n        const task = {\n            id: this._getNextId(state),\n            name: taskName,\n        };\n        stateManager.setReadOnly(false);\n        state.todo.add(task);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Remove a task from the lists.\n     *\n     * @param {StateManager} stateManager State manager.\n     * @param {number} taskId Task id.\n     * @throws {Error} If the task is not removed.\n     */\n    removeTask(stateManager, taskId) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        if (!state.todo.delete(taskId) && !state.done.delete(taskId)) {\n            throw new Error('Task ' + taskId + ' not found');\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Move a task to the done list.\n     *\n     * @param {StateManager} stateManager State manager.\n     * @param {number} taskId Task id.\n     */\n    markDone(stateManager, taskId) {\n        const state = stateManager.state;\n        const task = state.todo.get(taskId);\n        if (!task) {\n            throw new Error('Task ' + taskId + ' not found');\n        }\n        stateManager.setReadOnly(false);\n        state.todo.delete(taskId);\n        state.done.add(task);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Move a task to the todo list.\n     *\n     * @param {StateManager} stateManager State manager.\n     * @param {number} taskId Task id.\n     */\n    markTodo(stateManager, taskId) {\n        const state = stateManager.state;\n        const task = state.done.get(taskId);\n        if (!task) {\n            throw new Error('Task ' + taskId + ' not found');\n        }\n        stateManager.setReadOnly(false);\n        state.done.delete(taskId);\n        state.todo.add(task);\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Calculate the first free id.\n     *\n     * In most cases, we don't need to calculate the next id because the\n     * server will provide it. However, in this case, we are implementing a\n     * full frontend application and we don't send the data to the server.\n     *\n     * @param {Object} state the state data\n     * @returns\n     */\n    _getNextId(state) {\n        return Math.max(...state.todo.keys(), ...state.done.keys()) + 1;\n    }\n}\n\n// The reactive instance requires an event (eventNamer and eventDispatch method)\nexport const reactive = new TodoList({\n    name: 'mod_nosferatu_example',\n    eventName: eventTypes.modNosferatuStateUpdated,\n    eventDispatch: notifyModNosferatuStateUpdated,\n    state,\n    mutations: new Mutations(),\n});\n"],"names":["TodoList","Reactive","hasTasks","this","state","todo","size","done","reactive","name","eventName","eventTypes","modNosferatuStateUpdated","eventDispatch","notifyModNosferatuStateUpdated","id","mutations","addTask","stateManager","taskName","task","_getNextId","setReadOnly","add","removeTask","taskId","delete","Error","markDone","get","markTodo","Math","max","keys"],"mappings":"4OAuDMA,iBAAiBC,mBAMnBC,kBACWC,KAAKC,MAAMC,KAAKC,KAAO,GAAKH,KAAKC,MAAMG,KAAKD,KAAO,SA6FrDE,SAAW,IAAIR,SAAS,CACjCS,KAAM,wBACNC,UAAWC,mBAAWC,yBACtBC,cAAeC,uCACfV,MA/HU,CACVC,KAAM,CACF,CACIU,GAAI,EACJN,KAAM,mCAEV,CACIM,GAAI,EACJN,KAAM,+BAGdF,KAAM,CACF,CACIQ,GAAI,EACJN,KAAM,0CAkHdO,UAAW,UApFXC,QAAQC,aAAcC,gBACZf,MAAQc,aAAad,MACrBgB,KAAO,CACTL,GAAIZ,KAAKkB,WAAWjB,OACpBK,KAAMU,UAEVD,aAAaI,aAAY,GACzBlB,MAAMC,KAAKkB,IAAIH,MACfF,aAAaI,aAAY,GAU7BE,WAAWN,aAAcO,cACfrB,MAAQc,aAAad,SAC3Bc,aAAaI,aAAY,IACpBlB,MAAMC,KAAKqB,OAAOD,UAAYrB,MAAMG,KAAKmB,OAAOD,cAC3C,IAAIE,MAAM,QAAUF,OAAS,cAEvCP,aAAaI,aAAY,GAS7BM,SAASV,aAAcO,cACbrB,MAAQc,aAAad,MACrBgB,KAAOhB,MAAMC,KAAKwB,IAAIJ,YACvBL,WACK,IAAIO,MAAM,QAAUF,OAAS,cAEvCP,aAAaI,aAAY,GACzBlB,MAAMC,KAAKqB,OAAOD,QAClBrB,MAAMG,KAAKgB,IAAIH,MACfF,aAAaI,aAAY,GAS7BQ,SAASZ,aAAcO,cACbrB,MAAQc,aAAad,MACrBgB,KAAOhB,MAAMG,KAAKsB,IAAIJ,YACvBL,WACK,IAAIO,MAAM,QAAUF,OAAS,cAEvCP,aAAaI,aAAY,GACzBlB,MAAMG,KAAKmB,OAAOD,QAClBrB,MAAMC,KAAKkB,IAAIH,MACfF,aAAaI,aAAY,GAa7BD,WAAWjB,cACA2B,KAAKC,OAAO5B,MAAMC,KAAK4B,UAAW7B,MAAMG,KAAK0B,QAAU"}