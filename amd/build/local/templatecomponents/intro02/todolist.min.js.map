{"version":3,"file":"todolist.min.js","sources":["../../../../src/local/templatecomponents/intro02/todolist.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Component to show how to do a basic todo list using template components.\n *\n * As you may notice, there is no HTML updated in this module. All the HTML changes\n * are handled by the Template Component Virtual DOM.\n *\n * @module     mod_nosferatu/local/templatecomponents/intro02/todolist\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {TemplateComponent} from 'core/reactive';\n\nexport default class extends TemplateComponent {\n\n    /**\n     * All the component definition should be initialized on the \"create\" method.\n     */\n    create() {\n        // This is an optional name for the debugging messages.\n        this.name = 'nosferatu-app-todolist';\n        // Any extra object attribute can be defined here.\n    }\n\n    /**\n     * Get the template name.\n     *\n     * @returns {string}\n     */\n    getTemplateName() {\n        return 'mod_nosferatu/local/templatecomponents/intro02/todolist';\n    }\n\n    /**\n     * Get the data to be used in the template.\n     *\n     * This method is called every time the template must be updated.\n     * However, the Viirtual DOM diff is costly. To prevent unnecesary updates\n     * the Template Component won't update the template if the data is the same\n     * as the last update.\n     *\n     * @returns {Object}\n     */\n    getTemplateData() {\n        const result = {\n            todo: this.reactive.state.todo,\n            done: this.reactive.state.done,\n            hastasks: this.reactive.hasTasks(),\n            hastodo: this.reactive.state.todo.size > 0,\n            hasdone: this.reactive.state.done.size > 0,\n        };\n        return result;\n    }\n\n    stateReady() {\n        // We want to reload the template when the state is ready. This is quite common\n        // when the state is loaded using webservices instead of rendered in the server.\n        this.refreshTemplate();\n\n        // Even with the refresh in progress, the main element is also ready to be used\n        // and add the event listener. It is important to delegate as much events to the\n        // main element as possible to simplify the logic.\n        this.addEventListener(this.element, 'submit', this.processSubmission);\n        this.addEventListener(this.element, 'click', this.processClick);\n    }\n\n    /**\n     * Process a submission event.\n     *\n     * We only have one form in this component, so we can process all the submissions here.\n     *\n     * @param {Event} event\n     */\n    processSubmission(event) {\n        event.preventDefault();\n        // We add an data-mdl-ref to the input field to be able to reference it.\n        const nameInput = this.getReference('name');\n        if (nameInput.value.trim() === '') {\n            return;\n        }\n        this.reactive.dispatch('addTask', nameInput.value,);\n        // All forms input are static (they won't refresh when the new HTML is loaded),\n        // so we need to clear the input field manually.\n        nameInput.value = '';\n    }\n\n    /**\n     * Process component click events.\n     *\n     * We add special attributes for action (the mutation name) and id (the task id) to the elements.\n     * This is a typical pattern to identify the action to be executed and simplify handlers.\n     *\n     * @param {Event} event\n     */\n    processClick(event) {\n        const clickedElement = event.target.closest('[data-mdl-nosferatu-action]');\n        if (!clickedElement) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const taskid = parseInt(clickedElement.getAttribute('data-mdl-nosferatu-id'));\n        const action = clickedElement.getAttribute('data-mdl-nosferatu-action');\n\n        this.reactive.dispatch(action, taskid);\n    }\n}\n"],"names":["TemplateComponent","create","name","getTemplateName","getTemplateData","todo","this","reactive","state","done","hastasks","hasTasks","hastodo","size","hasdone","stateReady","refreshTemplate","addEventListener","element","processSubmission","processClick","event","preventDefault","nameInput","getReference","value","trim","dispatch","clickedElement","target","closest","taskid","parseInt","getAttribute","action"],"mappings":";;;;;;;;;;;uBA2B6BA,4BAKzBC,cAESC,KAAO,yBAShBC,wBACW,0DAaXC,wBACmB,CACXC,KAAMC,KAAKC,SAASC,MAAMH,KAC1BI,KAAMH,KAAKC,SAASC,MAAMC,KAC1BC,SAAUJ,KAAKC,SAASI,WACxBC,QAASN,KAAKC,SAASC,MAAMH,KAAKQ,KAAO,EACzCC,QAASR,KAAKC,SAASC,MAAMC,KAAKI,KAAO,GAKjDE,kBAGSC,uBAKAC,iBAAiBX,KAAKY,QAAS,SAAUZ,KAAKa,wBAC9CF,iBAAiBX,KAAKY,QAAS,QAASZ,KAAKc,cAUtDD,kBAAkBE,OACdA,MAAMC,uBAEAC,UAAYjB,KAAKkB,aAAa,QACL,KAA3BD,UAAUE,MAAMC,cAGfnB,SAASoB,SAAS,UAAWJ,UAAUE,OAG5CF,UAAUE,MAAQ,IAWtBL,aAAaC,aACHO,eAAiBP,MAAMQ,OAAOC,QAAQ,mCACvCF,sBAILP,MAAMC,uBAEAS,OAASC,SAASJ,eAAeK,aAAa,0BAC9CC,OAASN,eAAeK,aAAa,kCAEtC1B,SAASoB,SAASO,OAAQH"}