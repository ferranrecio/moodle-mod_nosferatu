define("mod_nosferatu/local/templatecomponents/intro02/app",["exports","core/reactive","mod_nosferatu/events"],(function(_exports,_reactive,_events){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.reactive=void 0;class TodoList extends _reactive.Reactive{hasTasks(){return this.state.todo.size>0||this.state.done.size>0}}const reactive=new TodoList({name:"mod_nosferatu_example",eventName:_events.eventTypes.modNosferatuStateUpdated,eventDispatch:_events.notifyModNosferatuStateUpdated,state:{todo:[{id:1,name:"Create a new Template Component"},{id:2,name:"Understand state mutations"}],done:[{id:3,name:"Learn the basics of the Reactive API"}]},mutations:new class{addTask(stateManager,taskName){const state=stateManager.state,task={id:this._getNextId(state),name:taskName};stateManager.setReadOnly(!1),state.todo.add(task),stateManager.setReadOnly(!0)}removeTask(stateManager,taskId){const state=stateManager.state;if(stateManager.setReadOnly(!1),!state.todo.delete(taskId)&&!state.done.delete(taskId))throw new Error("Task "+taskId+" not found");stateManager.setReadOnly(!0)}markDone(stateManager,taskId){const state=stateManager.state,task=state.todo.get(taskId);if(!task)throw new Error("Task "+taskId+" not found");stateManager.setReadOnly(!1),state.todo.delete(taskId),state.done.add(task),stateManager.setReadOnly(!0)}markTodo(stateManager,taskId){const state=stateManager.state,task=state.done.get(taskId);if(!task)throw new Error("Task "+taskId+" not found");stateManager.setReadOnly(!1),state.done.delete(taskId),state.todo.add(task),stateManager.setReadOnly(!0)}_getNextId(state){return Math.max(...state.todo.keys(),...state.done.keys())+1}}});_exports.reactive=reactive}));

//# sourceMappingURL=app.min.js.map